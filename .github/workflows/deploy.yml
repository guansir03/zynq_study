name: Deploy VitePress site to Pages

on:
  push:
    branches: [master]
 
# 设置token访问权限
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许同时进行一次部署，跳过正在运行和最新队列之间的运行队列
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  # 构建工作
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 如果未启用 lastUpdated，则不需要
      # - name: Setup pnpm             # 移除 pnpm 设置步骤
      #   uses: pnpm/action-setup@v2
      #   with:
      #     version: 8.6.12
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm # 修改缓存为 npm
      - name: Setup Pages
        uses: actions/configure-pages@v3  # 在工作流程自动配置GithubPages
      - name: Install dependencies
        run: npm install # 修改为 npm install
      - name: Build with VitePress
        run: |
          npm run docs:build # 修改为 npm run docs:build
          touch .vitepress/dist/.nojekyll # 将 .nojekyll 放入构建输出目录
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2  # 上传构建产物
        with:
          # path: .vitepress/dist # 指定上传的路径，当前是根目录，如果是docs需要加docs/的前缀 # <-- 这行原注释可能有误，通常 VitePress 构建输出就在 .vitepress/dist
          path: .vitepress/dist # 保持上传路径为构建输出目录

  # 部署工作
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # 从后续的输出中获取部署后的页面URL
    needs: build    # 在build后面完成
    runs-on: ubuntu-latest  # 运行在最新版本的ubuntu系统上
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment  # 指定id
        uses: actions/deploy-pages@v2 # 将之前的构建产物部署到github pages中

